// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/user_kyc/store.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/jaysm12/multifinance-apps/models"
)

// MockUserKYCStoreMethod is a mock of UserKYCStoreMethod interface.
type MockUserKYCStoreMethod struct {
	ctrl     *gomock.Controller
	recorder *MockUserKYCStoreMethodMockRecorder
}

// MockUserKYCStoreMethodMockRecorder is the mock recorder for MockUserKYCStoreMethod.
type MockUserKYCStoreMethodMockRecorder struct {
	mock *MockUserKYCStoreMethod
}

// NewMockUserKYCStoreMethod creates a new mock instance.
func NewMockUserKYCStoreMethod(ctrl *gomock.Controller) *MockUserKYCStoreMethod {
	mock := &MockUserKYCStoreMethod{ctrl: ctrl}
	mock.recorder = &MockUserKYCStoreMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserKYCStoreMethod) EXPECT() *MockUserKYCStoreMethodMockRecorder {
	return m.recorder
}

// CreateUserKYC mocks base method.
func (m *MockUserKYCStoreMethod) CreateUserKYC(userinfo models.UserKYC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserKYC", userinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserKYC indicates an expected call of CreateUserKYC.
func (mr *MockUserKYCStoreMethodMockRecorder) CreateUserKYC(userinfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserKYC", reflect.TypeOf((*MockUserKYCStoreMethod)(nil).CreateUserKYC), userinfo)
}

// DeleteUserKYC mocks base method.
func (m *MockUserKYCStoreMethod) DeleteUserKYC(userKycId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserKYC", userKycId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserKYC indicates an expected call of DeleteUserKYC.
func (mr *MockUserKYCStoreMethodMockRecorder) DeleteUserKYC(userKycId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserKYC", reflect.TypeOf((*MockUserKYCStoreMethod)(nil).DeleteUserKYC), userKycId)
}

// GetUserKYCInfoByUserID mocks base method.
func (m *MockUserKYCStoreMethod) GetUserKYCInfoByUserID(userid int) (models.UserKYC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserKYCInfoByUserID", userid)
	ret0, _ := ret[0].(models.UserKYC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserKYCInfoByUserID indicates an expected call of GetUserKYCInfoByUserID.
func (mr *MockUserKYCStoreMethodMockRecorder) GetUserKYCInfoByUserID(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserKYCInfoByUserID", reflect.TypeOf((*MockUserKYCStoreMethod)(nil).GetUserKYCInfoByUserID), userid)
}

// UpdateUserKYC mocks base method.
func (m *MockUserKYCStoreMethod) UpdateUserKYC(userinfo models.UserKYC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserKYC", userinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserKYC indicates an expected call of UpdateUserKYC.
func (mr *MockUserKYCStoreMethodMockRecorder) UpdateUserKYC(userinfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserKYC", reflect.TypeOf((*MockUserKYCStoreMethod)(nil).UpdateUserKYC), userinfo)
}
