// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/installment/store.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/jaysm12/multifinance-apps/models"
)

// MockInstallmentStoreMethod is a mock of InstallmentStoreMethod interface.
type MockInstallmentStoreMethod struct {
	ctrl     *gomock.Controller
	recorder *MockInstallmentStoreMethodMockRecorder
}

// MockInstallmentStoreMethodMockRecorder is the mock recorder for MockInstallmentStoreMethod.
type MockInstallmentStoreMethodMockRecorder struct {
	mock *MockInstallmentStoreMethod
}

// NewMockInstallmentStoreMethod creates a new mock instance.
func NewMockInstallmentStoreMethod(ctrl *gomock.Controller) *MockInstallmentStoreMethod {
	mock := &MockInstallmentStoreMethod{ctrl: ctrl}
	mock.recorder = &MockInstallmentStoreMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstallmentStoreMethod) EXPECT() *MockInstallmentStoreMethodMockRecorder {
	return m.recorder
}

// CreateInstallment mocks base method.
func (m *MockInstallmentStoreMethod) CreateInstallment(installmentinfo models.Installment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallment", installmentinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstallment indicates an expected call of CreateInstallment.
func (mr *MockInstallmentStoreMethodMockRecorder) CreateInstallment(installmentinfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallment", reflect.TypeOf((*MockInstallmentStoreMethod)(nil).CreateInstallment), installmentinfo)
}

// GetInstallmentInfoByContractId mocks base method.
func (m *MockInstallmentStoreMethod) GetInstallmentInfoByContractId(contractId string) (models.Installment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallmentInfoByContractId", contractId)
	ret0, _ := ret[0].(models.Installment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallmentInfoByContractId indicates an expected call of GetInstallmentInfoByContractId.
func (mr *MockInstallmentStoreMethodMockRecorder) GetInstallmentInfoByContractId(contractId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallmentInfoByContractId", reflect.TypeOf((*MockInstallmentStoreMethod)(nil).GetInstallmentInfoByContractId), contractId)
}

// UpdateInstallment mocks base method.
func (m *MockInstallmentStoreMethod) UpdateInstallment(installmentinfo models.Installment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstallment", installmentinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstallment indicates an expected call of UpdateInstallment.
func (mr *MockInstallmentStoreMethodMockRecorder) UpdateInstallment(installmentinfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstallment", reflect.TypeOf((*MockInstallmentStoreMethod)(nil).UpdateInstallment), installmentinfo)
}
