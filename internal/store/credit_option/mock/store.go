// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/credit_option/store.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/jaysm12/multifinance-apps/models"
)

// MockCreditOptionStoreMethod is a mock of CreditOptionStoreMethod interface.
type MockCreditOptionStoreMethod struct {
	ctrl     *gomock.Controller
	recorder *MockCreditOptionStoreMethodMockRecorder
}

// MockCreditOptionStoreMethodMockRecorder is the mock recorder for MockCreditOptionStoreMethod.
type MockCreditOptionStoreMethodMockRecorder struct {
	mock *MockCreditOptionStoreMethod
}

// NewMockCreditOptionStoreMethod creates a new mock instance.
func NewMockCreditOptionStoreMethod(ctrl *gomock.Controller) *MockCreditOptionStoreMethod {
	mock := &MockCreditOptionStoreMethod{ctrl: ctrl}
	mock.recorder = &MockCreditOptionStoreMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditOptionStoreMethod) EXPECT() *MockCreditOptionStoreMethodMockRecorder {
	return m.recorder
}

// CreateCreditOptionBulk mocks base method.
func (m *MockCreditOptionStoreMethod) CreateCreditOptionBulk(creditOptioninfo []models.CreditOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditOptionBulk", creditOptioninfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCreditOptionBulk indicates an expected call of CreateCreditOptionBulk.
func (mr *MockCreditOptionStoreMethodMockRecorder) CreateCreditOptionBulk(creditOptioninfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditOptionBulk", reflect.TypeOf((*MockCreditOptionStoreMethod)(nil).CreateCreditOptionBulk), creditOptioninfo)
}

// DeleteCreditOption mocks base method.
func (m *MockCreditOptionStoreMethod) DeleteCreditOption(creditOptionid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCreditOption", creditOptionid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCreditOption indicates an expected call of DeleteCreditOption.
func (mr *MockCreditOptionStoreMethodMockRecorder) DeleteCreditOption(creditOptionid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCreditOption", reflect.TypeOf((*MockCreditOptionStoreMethod)(nil).DeleteCreditOption), creditOptionid)
}

// GetCreditOptionInfoByID mocks base method.
func (m *MockCreditOptionStoreMethod) GetCreditOptionInfoByID(creditOptionid uint) (models.CreditOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditOptionInfoByID", creditOptionid)
	ret0, _ := ret[0].(models.CreditOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditOptionInfoByID indicates an expected call of GetCreditOptionInfoByID.
func (mr *MockCreditOptionStoreMethodMockRecorder) GetCreditOptionInfoByID(creditOptionid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditOptionInfoByID", reflect.TypeOf((*MockCreditOptionStoreMethod)(nil).GetCreditOptionInfoByID), creditOptionid)
}

// UpdateCreditOption mocks base method.
func (m *MockCreditOptionStoreMethod) UpdateCreditOption(creditOptioninfo models.CreditOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreditOption", creditOptioninfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreditOption indicates an expected call of UpdateCreditOption.
func (mr *MockCreditOptionStoreMethodMockRecorder) UpdateCreditOption(creditOptioninfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreditOption", reflect.TypeOf((*MockCreditOptionStoreMethod)(nil).UpdateCreditOption), creditOptioninfo)
}
